{
	"info": {
		"_postman_id": "43420fe7-ec4e-46eb-bc75-4ee363207e0a",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"// Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var resp_body = JSON.parse(responseBody);\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"   pm.expect(resp_body.name).to.eql(\"Violetta\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"   pm.expect(resp_body.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"   pm.expect(resp_body.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req_body = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check name_1\", function () {\r",
							"    pm.expect(resp_body.name).to.eql(req_body.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check age_1\", function () {\r",
							"    pm.expect(resp_body.age).to.eql(req_body.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary_1\", function () {\r",
							"    pm.expect(resp_body.salary).to.eql(+req_body.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"параметр family = \", resp_body.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(resp_body.family.u_salary_1_5_year).to.eql(resp_body.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Violetta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var res_body = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(res_body.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"        pm.expect(res_body.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"        pm.expect(res_body.salary).to.eql(+req_data.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(res_body.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog check has name\", function () {\r",
							"       pm.expect(res_body.family.pets.dog.name).not.eql(undefined);\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog check has age\", function () {\r",
							"       pm.expect(res_body.family.pets.dog.age).not.eql(undefined);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name check has Luky\", function () {\r",
							"       pm.expect(res_body.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age check has 4\", function () {\r",
							"       pm.expect(res_body.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Violetta&age=32&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Violetta"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var res_body = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(res_body.name).to.eql(req_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"        pm.expect(res_body.age).to.eql(+req_data.age);\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary = \" + req_data.salary);\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Salary = \" + res_body.salary);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Salary_0 = \" + res_body.salary[0]);\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_1 = \" + res_body.salary[1]);\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_2 = \" + res_body.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0 element salary response = salary request\", function () {\r",
							"       pm.expect(res_body.salary[0]).to.eql(+req_data.salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1 element salary response = salary*2 request\", function () {\r",
							"       pm.expect(+res_body.salary[1]).to.eql(2*req_data.salary);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2 element salary response = salary*3 request\", function () {\r",
							"       pm.expect(+res_body.salary[2]).to.eql(3*req_data.salary);\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Violetta\");\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"32\");\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"500\");\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"console.log(\"по порядку элементы списка\");\r",
							"for (var i=0; i < res_body.salary.length; i++){\r",
							"    console.log(\"Salary_\" + i + \"= \" + res_body.salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Violetta&age=32&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Violetta"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var res_body = JSON.parse(responseBody);\r",
							"\r",
							"// Спарсить request.\r",
							"var req_body = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has start_qa_salary\", function () {\r",
							"        pm.expect(res_body).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
							"        pm.expect(res_body).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has qa_salary_after_12_months\", function () {\r",
							"        pm.expect(res_body).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(res_body).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has qa_salary_after_3.5_years\", function () {\r",
							"        pm.expect(res_body).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has person\", function () {\r",
							"        pm.expect(res_body).to.have.property('person');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary из request\", function () {\r",
							"    pm.expect(res_body.start_qa_salary).to.eql(+req_body.salary);\r",
							"});\r",
							"// console.log(res_body.start_qa_salary);\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 из request\", function () {\r",
							"    pm.expect(res_body.qa_salary_after_6_months).to.eql(2*req_body.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 из request\", function () {\r",
							"    pm.expect(res_body.qa_salary_after_12_months).to.eql(2.7*req_body.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 из request\", function () {\r",
							"    pm.expect(res_body['qa_salary_after_1.5_year']).to.eql(3.3*req_body.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8 из request\", function () {\r",
							"    pm.expect(res_body['qa_salary_after_3.5_years']).to.eql(3.8*req_body.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1] = salary из request\", function () {\r",
							"    pm.expect(res_body.person.u_name[1]).to.eql(+req_body.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age = age из request\", function () {\r",
							"    pm.expect(res_body.person.u_age).to.eql(+req_body.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"person.u_salary_5_years = salary*4.2 из request\", function () {\r",
							"    pm.expect(res_body.person.u_salary_5_years).to.eql(4.2*req_body.salary);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in res_body.person)\r",
							"{\r",
							"    if (typeof(res_body.person[i]) == 'object')\r",
							"     {\r",
							"         console.log(\"Value u_name = \" + res_body.person[i]);\r",
							"        \r",
							"     }\r",
							"    else \r",
							"     {\r",
							"         console.log(\"Value person = \" + res_body.person[i]);\r",
							"     }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}